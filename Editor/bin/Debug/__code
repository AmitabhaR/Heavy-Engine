using System;
using System.Drawing;
using System.Windows.Forms;
using System.IO;
using Joystick;

namespace App
{
    public struct GameObject
	{
	    public string name;
		public string text;
		public int tag;
		public Image img;
		public bool _static;
		public bool physics;
		public bool rigidbody;
		public bool collider;
		
	}
	
	public class GameObject_Scene
	{
		public int pos_x;
		public int pos_y;
		public GameObject obj_instance;
		public string instance_name;
		public delegate void process(GameObject_Scene gameObject); // To add script , this must be done by the text writer.
		public process process_del;
		
		public void Translate(int x , int y)
		{
		   pos_x += x;
		   pos_y += y;
		}
		
		public void setText(string text)
		{
			obj_instance.text = text;
		}
		
		public void setStatic(bool value)
		{
		    obj_instance._static = value;
		}
		
		public void isRigid(bool value)
		{
			obj_instance.rigidbody = value;
		}
		
		public void isCollider(bool value)
		{
			obj_instance.collider = value;
		}
		
		public void setTag(int tag)
		{
			obj_instance.tag = tag;
		}
		
		public void setImage(Image img)
		{
			obj_instance.img = img;
		}
	}

    public class Scene
	{
	    Timer gameTimer;
	    GameObject_Scene[] object_array = new GameObject_Scene[0];
        PictureBox canvas;        
		public int A = 0,R = 0,G = 0,B = 0;
		public int speed = 1;
		public int gravity = 0;
		public string name = "";
		public delegate void onCollision_Handler(GameObject_Scene collider1,GameObject_Scene collider2);
        public static onCollision_Handler onCollision;		
		
		public void startScene(PictureBox canvas)
		{
		 this.canvas = canvas;
		 gameTimer = new Timer();
		 gameTimer.Tick += updateScene;
		 canvas.Paint += drawScene;
		 gameTimer.Enabled = true;
		 gameTimer.Interval = speed;
		 gameTimer.Start( );
		}
		
		private void updateScene(object sender,EventArgs e)
		{
		   for (int cnt = 0;cnt < object_array.Length;cnt++)
           {
		       if (object_array[cnt].process_del != null)
			   {
			     if (!object_array[cnt].obj_instance._static)
				 {
					if (object_array[cnt].obj_instance.physics)
					{
						if (object_array[cnt].obj_instance.rigidbody)
						{
							object_array[cnt].pos_y += gravity;
						}
						
						for(int cnt0 = 0;cnt0 < object_array.Length;cnt0++)
						{
						      if (cnt0 == cnt)
							  {
							    continue;
							  }
							  else
						      {
							    if (object_array[cnt].obj_instance.img != null && object_array[cnt0].obj_instance.img != null && object_array[cnt].obj_instance.physics && object_array[cnt0].obj_instance.physics && object_array[cnt].obj_instance.collider && object_array[cnt0].obj_instance.collider)
								{
									if (object_array[cnt].pos_x + object_array[cnt].obj_instance.img.Width > object_array[cnt0].pos_x && object_array[cnt].pos_x < object_array[cnt0].pos_x + object_array[cnt0].obj_instance.img.Width && object_array[cnt].pos_y + object_array[cnt].obj_instance.img.Height > object_array[cnt0].pos_y && object_array[cnt].pos_y < object_array[cnt0].pos_y + object_array[cnt0].obj_instance.img.Height)
									{
									    if (onCollision != null)
										{
											onCollision(object_array[cnt],object_array[cnt0]);
										}
									}
								}
							  }
						}
					}
   				 }
			   
				 object_array[cnt].process_del(object_array[cnt]);
			   }
		   }

           canvas.Refresh( );		   
		}
		
		private void drawScene(object sender,PaintEventArgs e)
		{
		    e.Graphics.Clear(Color.FromArgb(A,R,G,B));
			
		    for(int cnt = 0;cnt < object_array.Length;cnt++)
			{
               if (object_array[cnt].obj_instance.img != null)
			   {
                   e.Graphics.DrawImage(object_array[cnt].obj_instance.img,new Point(object_array[cnt].pos_x,object_array[cnt].pos_y));				   
			   }			   
			   else if (object_array[cnt].obj_instance.text != "")
			   {
                  e.Graphics.DrawString(object_array[cnt].obj_instance.text,new Font("Verdana",12),Brushes.Black,new Point(object_array[cnt].pos_x,object_array[cnt].pos_y));				  
			   }
			}
		}
		
		public void endScene( )
		{
		 gameTimer.Stop( );		
		}
		
		public void loadGameObject(GameObject_Scene gameObject)
		{
		  Array.Resize<GameObject_Scene>(ref object_array,object_array.Length + 1);
		  object_array[object_array.Length - 1] = gameObject;
		}
		
		public GameObject_Scene findGameObject(string name)
		{
		GameObject_Scene null_obj = new GameObject_Scene( );
			for(int cnt = 0;cnt < object_array.Length;cnt++)
			{
               if (object_array[cnt].instance_name == name)
			   {
					return object_array[cnt];
			   }			   
			}
			
			return null_obj;
		}
	}
	
    public class ObjectLoader
	{
       static GameObject[] gameObject_array = new GameObject[0];
	   
	   public static void loadObject(string name,string text,string img_path,int tag,bool isStatic,bool isPhysics,bool isRigid,bool isCollider)
	   {
	      Array.Resize<GameObject>(ref gameObject_array,gameObject_array.Length + 1);
		  GameObject instance = new GameObject( );
		  
		  instance.name = name;
		  instance.text = text;
		  if (File.Exists(img_path))
		  {
			instance.img = Image.FromFile(img_path);
		  }
		  else
		  {
		    instance.img = null;
		  }
		  instance.tag = tag;
		  instance._static = isStatic;
		  instance.physics = isPhysics;
		  instance.rigidbody = isRigid;
		  instance.collider = isCollider;
		  gameObject_array[gameObject_array.Length - 1] = instance;
	   }
	   
	   public static GameObject findGameObjectWithTag(int tag)
	   {
	   GameObject null_obj = new GameObject( );
          for(int cnt = 0;cnt < gameObject_array.Length;cnt++)
          {
		      if (gameObject_array[cnt].tag == tag)
			  {
                  return gameObject_array[cnt];			  
			  }
		  }		  
		  
		  return null_obj;
	   }
	   
	   public static GameObject findGameObjectWithName(string name)
	   {
		GameObject null_obj = new GameObject( );
	   
		  for(int cnt = 0;cnt < gameObject_array.Length;cnt++)
          {
		      if (gameObject_array[cnt].name == name)
			  {
                  return gameObject_array[cnt];			  
			  }
		  }		  
		  
		  return null_obj;
	   }
	}
	
	public class SceneLoader
	{
         public static Scene[] scene_array = new Scene[0];
		 
		 public static void addScene(Scene scene )
		 {
		       Array.Resize<Scene>(ref scene_array,scene_array.Length + 1);
			   scene_array[scene_array.Length - 1] = scene;
		 }
		 
		 public static Scene getScene(string name)
		 {
		     for(int cntr = 0;cntr < scene_array.Length;cntr++)
			 {
				if (scene_array[cntr].name == name)
				{
					return scene_array[cntr];
				}
			 }
			 
			 return null;
		 }
	}
	
	public class Resources
	{
		public static Image findImage(string file_name)
		{
		
			if (File.Exists(Application.StartupPath + "\\Data\\" + file_name + ".X"))
			{
				return Image.FromFile(Application.StartupPath + "\\Data\\" + file_name + ".X");
			}
			else
			{
				return null;
			}
		}
		
		public static StreamReader getResourceAsStream(string file_name)
		{
			if (File.Exists(Application.StartupPath + "\\Data\\" + file_name + ".X"))
			{
				return new StreamReader(Application.StartupPath + "\\Data\\" + file_name + ".X");
			}
			else
			{
				return null;
			}
		}
		
		public static string getResource(string file_name)
		{
			if (File.Exists(Application.StartupPath + "\\Data\\" + file_name + ".X"))
			{
				return Application.StartupPath + "\\Data\\" + file_name + ".X";
			}
			else
			{
				return "";
			}
		}
	}
	
    public class App_Loader
    {
	   static  Scene cur_scene;
	   static	 Form mainWindow;
	   static	 PictureBox canvas;
       public delegate void onKeyPress_Handler(Keys keyCode );	   
	   public static onKeyPress_Handler onKeyPress;
	   
		public static void loadScene(Scene newScene)
		{
           cur_scene = newScene;		
		}
		
		public static Scene getActiveScene()
		{
			return cur_scene;
		}
		
		public static void setSize(int width,int height)
		{
		  mainWindow.Width = width;
		  mainWindow.Height = height;
		}
		
		public static int[] getSize()
		{
		  int[] size = { mainWindow.Width,mainWindow.Height };
          return size;		
		}
		
		public static Form getWindowHandle( )
		{
          return mainWindow;		
		}
		
		private static void OnKeyDOWN(object sender,KeyEventArgs e)
		{
			if (onKeyPress != null)
			{
			    onKeyPress(e.KeyCode);
			}
		}
		
		public static void Initialize(string project_name)
		{
           // Initialize and load stuffs.
           mainWindow = new Form( );
		   canvas = new PictureBox ();
		   canvas.SetBounds(0,0,600,640);
		   mainWindow.KeyDown += OnKeyDOWN; 
		   mainWindow.Text = project_name;
		   mainWindow.MaximizeBox = mainWindow.MinimizeBox = false;
		   mainWindow.ShowIcon = false;
		   mainWindow.ShowInTaskbar = false;
		   mainWindow.SetBounds(50,50,600,640);
		   mainWindow.Controls.Add(canvas);
		   mainWindow.Show( );
		}